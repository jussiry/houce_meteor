// Generated by CoffeeScript 1.4.0
(function() {
  var func, func_name, functions, hash_extensions, hash_proto, p, prototypes, type,
    __hasProp = {}.hasOwnProperty;

  if (typeof window !== "undefined" && window !== null) {
    this.global = window;
  }

  prototypes = {
    Array: {
      get_num: function() {
        var el, _i, _len;
        for (_i = 0, _len = this.length; _i < _len; _i++) {
          el = this[_i];
          if (el.constructor === Number) {
            return el;
          }
        }
      },
      get_str: function() {
        var el, _i, _len;
        for (_i = 0, _len = this.length; _i < _len; _i++) {
          el = this[_i];
          if (el.constructor === String) {
            return el;
          }
        }
      },
      get_arr: function() {
        var el, _i, _len;
        for (_i = 0, _len = this.length; _i < _len; _i++) {
          el = this[_i];
          if (el.constructor === Array) {
            return el;
          }
        }
      },
      get_func: function() {
        var el, _i, _len;
        for (_i = 0, _len = this.length; _i < _len; _i++) {
          el = this[_i];
          if (el.constructor === Function) {
            return el;
          }
        }
      },
      get_bool: function() {
        var el, _i, _len;
        for (_i = 0, _len = this.length; _i < _len; _i++) {
          el = this[_i];
          if (el.constructor === Boolean) {
            return el;
          }
        }
      }
    },
    Number: {
      toDate: function() {
        return Date.create(this);
      },
      getPrecision: function() {
        var _ref;
        return ((_ref = (this + '').split(".")[1]) != null ? _ref.length : void 0) || 0;
      },
      is_in: function(arr) {
        return arr.some(this.valueOf());
      }
    },
    String: {
      is_in: function(arr) {
        return arr.some(this.valueOf());
      },
      parsesToNumber: function() {
        return !Object.isNaN(this.toNumber());
      },
      toPrimitive: function() {
        var str;
        str = '' + this;
        if (str.matches(['=', '(', '{'])) {
          throw "'" + str + "'.toPrimitive() has illegal characters.";
        }
        if (str.parsesToNumber()) {
          return str.toNumber();
        } else if (str.matches(['true', 'false', 'null'])) {
          return eval(str);
        } else {
          return str;
        }
      },
      matches: function(strings) {
        var k, str;
        if (typeof strings !== 'object') {
          return null;
        }
        for (k in strings) {
          if (!__hasProp.call(strings, k)) continue;
          str = strings[k];
          if ((this.match(('' + str).escapeRegExp())) && str !== '') {
            return true;
          }
        }
        return false;
      }
    }
  };

  if (Object.defineProperty != null) {
    for (type in prototypes) {
      functions = prototypes[type];
      for (func_name in functions) {
        func = functions[func_name];
        if (global[type].prototype[func_name] != null) {
          p = global[type].prototype;
          p[func_name + '_orig'] = p[func_name];
        }
        Object.defineProperty(global[type].prototype, func_name, {
          value: func
        });
      }
    }
  } else {
    throw "Object.defineProperty not supported!";
  }

  if (Object.defineProperty != null) {
    hash_extensions = {
      child: function(child) {
        if (child == null) {
          child = {};
        }
        child.__proto__ = this;
        return child;
      },
      first: function() {
        return Object.values(this)[0];
      },
      forEach: function(func) {
        return Object.each(this, function(key, val) {
          return func(val, key);
        });
      },
      has_own: function(prop_name) {
        return this.hasOwnProperty(prop_name) && this[prop_name] !== null;
      },
      is_in: function(arr_or_obj) {
        var k, v;
        for (k in arr_or_obj) {
          if (!__hasProp.call(arr_or_obj, k)) continue;
          v = arr_or_obj[k];
          if (this + '' === v + '' && typeof v !== 'object') {
            return true;
          }
        }
        return false;
      },
      length: function() {
        return Object.keys(this).length;
      },
      map: function(map_func) {
        var key, val;
        for (key in this) {
          val = this[key];
          this[key] = map_func(val, key);
        }
        return this;
      },
      own_properties: function() {
        var name, o, _i, _len, _ref;
        o = {};
        _ref = Object.getOwnPropertyNames(this);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          name = _ref[_i];
          o[name] = this[name];
        }
        return o;
      },
      proto_parents: function() {
        var cur_obj, parents;
        parents = [];
        cur_obj = this;
        while (((cur_obj = cur_obj.__proto__) != null) && parents.length < 10) {
          parents.push(cur_obj);
        }
        return parents;
      },
      remove: function(test_func) {
        var key, val;
        for (key in this) {
          val = this[key];
          if (test_func(key, val)) {
            delete obj[key];
          }
        }
        return obj;
      }
    };
    hash_proto = Object.extended().__proto__;
    for (func_name in hash_extensions) {
      func = hash_extensions[func_name];
      Object.defineProperty(hash_proto, func_name, {
        value: func
      });
    }
  }

}).call(this);
