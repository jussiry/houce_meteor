// Generated by CoffeeScript 1.4.0
(function() {
  var func, globals, name, q, _ref,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty;

  if (typeof window !== "undefined" && window !== null) {
    this.global = window;
  }

  globals = {
    callbacks: function() {
      var af, af_ready, af_responses, args, async_funcs, final_cb, ind, _fn, _i, _len;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (args.length === 2) {
        async_funcs = args[0];
        final_cb = args[1];
      } else {
        final_cb = args.pop();
        async_funcs = args[0];
      }
      af_responses = [];
      af_ready = (function() {
        return final_cb(af_responses);
      }).after(async_funcs.length);
      _fn = function() {
        var af_callback, i, params;
        i = ind;
        af_callback = function(res) {
          af_responses[i] = res;
          return af_ready();
        };
        if (typeof af === 'function') {
          return af(af_callback);
        } else if (Object.isArray(af)) {
          params = af;
          af = params.shift();
          params = params.concat(af_callback);
          return af.apply(null, params);
        } else {
          throw "Illegal asyn_func param for callbacks";
        }
      };
      for (ind = _i = 0, _len = async_funcs.length; _i < _len; ind = ++_i) {
        af = async_funcs[ind];
        _fn();
      }
    },
    call_with: function() {
      var args;
      if (arguments.length === 2) {
        return arguments[1].call(arguments[0]);
      } else {
        args = Array.prototype.slice.call(arguments);
        return args[args.length - 1].apply(args[0], args.slice(1, -1));
      }
    },
    child_of: function(parent, child) {
      if (child == null) {
        child = {};
      }
      child.__proto__ = parent;
      return child;
    },
    dir: function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return console.dir.apply(console, args);
    },
    do_with: function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return args.pop().apply(args.last(), args);
    },
    delay: function(ms, func) {
      if (Object.isFunction(ms)) {
        return ms.delay();
      } else {
        return func.delay(ms);
      }
    },
    dynamic: function(scope_or_func, func) {
      if (arguments.length === 2) {
        log('calling with scopre', scope_or_func);
        with(scope_or_func){ func(); };

      } else {
        with(this){ scope_or_func(); };

      }
    },
    each: Object.each,
    equal: Object.equal,
    ext: Object.extended,
    ifs: function(arg, true_str, false_str) {
      if (true_str == null) {
        true_str = arg;
      }
      if (arg) {
        return true_str;
      } else {
        if (false_str != null) {
          return false_str;
        } else {
          return '';
        }
      }
    },
    is_blank: function(obj) {
      return !(obj != null) || (Object.isString(obj) && /^\s*$/.test(obj)) || (typeof object === 'object' && Object.keys(obj).length === 0);
    },
    ins: function(o) {
      var key, str, val, _results;
      str = "" + o.constructor.name + " (" + (typeof o) + "):\n";
      _results = [];
      for (key in o) {
        if (!__hasProp.call(o, key)) continue;
        val = o[key];
        _results.push(str += "" + key + ": " + val + ",\n");
      }
      return _results;
    },
    keys: Object.keys,
    log: function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (args[0] === 'daa') {
        throw 'plaa';
      }
      return console.log.apply(console, args);
    },
    merge: Object.merge,
    proto_obj: (function() {
      var func_cache, get_func, hash_proto;
      func_cache = {};
      get_func = function(name) {
        var f;
        if ((f = func_cache[name]) != null) {
          return f;
        } else {
          return eval('func_cache[name] = function ' + name + '(){}');
        }
      };
      hash_proto = Object.extended().__proto__;
      return function() {
        var args, container, obj, obj_name, properties;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        switch (args.length) {
          case 1:
            obj = args[0];
            break;
          case 2:
            container = global;
            obj_name = args[0];
            properties = args[1];
            break;
          case 3:
            container = args[0];
            obj_name = args[1];
            properties = args[2];
        }
        if (args.length > 1) {
          container[obj_name] = obj = container[obj_name] != null ? merge(container[obj_name], properties) : properties;
          obj.constructor = get_func(obj_name);
          obj.name = obj_name;
        }
        if (obj.parent != null) {
          child_of(obj.parent, obj);
          delete obj.parent;
        } else {
          child_of(hash_proto, obj);
        }
        if (typeof obj.init === "function") {
          obj.init();
        }
        return obj;
      };
    })(),
    qs: typeof document !== "undefined" && document !== null ? document.querySelector.bind(document) : void 0,
    qsa: typeof document !== "undefined" && document !== null ? document.querySelectorAll.bind(document) : void 0,
    result_of: function(a) {
      if (typeof a === 'function') {
        return a();
      } else {
        return a;
      }
    },
    this_is: function() {
      var arg, args, this_obj, _i, _len, _ref;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      this_obj = args[0];
      _ref = args.slice(1, -1);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        arg = _ref[_i];
        this_obj.merge(arg);
      }
      return args.last().call(this_obj);
    },
    type: function(arg) {
      if (arg instanceof Array) {
        return 'array';
      }
      if (arg === null) {
        return 'null';
      }
      return typeof arg;
    },
    uniq: function(arr) {
      arr.__proto__ = Array.prototype;
      arr.unshift = function(new_el) {
        arr.remove(new_el);
        return Array.prototype.unshift.call(this, new_el);
      };
      arr.push = function(new_el) {
        arr.remove(new_el);
        return Array.prototype.push.call(this, new_el);
      };
      return arr;
    },
    values: Object.values
  };

  for (name in globals) {
    func = globals[name];
    global[name] = func;
  }

  if ((_ref = global.clone) == null) {
    global.clone = function(obj) {
      return Object.clone(obj, true);
    };
  }

  if (typeof $ !== "undefined" && $ !== null) {
    q = $;
  }

  Object.remove_els = function(obj, test_func) {
    var key, val;
    for (key in obj) {
      val = obj[key];
      if (test_func(key, val)) {
        delete obj[key];
      }
    }
    return obj;
  };

  Object.filter = function(obj, test_func) {
    var key, new_obj, val;
    new_obj = {};
    for (key in obj) {
      val = obj[key];
      if (test_func(key, val)) {
        new_obj[key] = val;
      }
    }
    return new_obj;
  };

}).call(this);
