// Generated by CoffeeScript 1.4.0
(function() {

  global.Pager = (function() {
    var bang, hashbang, me;
    hashbang = '#/';
    bang = '/';
    return me = {
      page_name: null,
      path_stack: [],
      path_history: [],
      back_path: null,
      params: {
        all: ext(),
        contexes: ext(),
        get: function(key) {
          var ctx, ctx_cont, k, v, _base, _ref, _ref1;
          if ((ctx = Meteor.deps.Context.current) != null) {
            ctx_cont = (_ref = (_base = me.params.contexes)[key]) != null ? _ref : _base[key] = ext();
            ctx_cont[ctx.id] = ctx;
          }
          if (me.params.all[key] != null) {
            return me.params.all[key];
          }
          _ref1 = me.params.all;
          for (k in _ref1) {
            v = _ref1[k];
            if (k.parsesToNumber() && v === key) {
              return true;
            }
          }
          return null;
        },
        set: function(key, new_val) {
          var cur_ind, k, v, _ref;
          if (new_val != null) {
            me.params.all[key] = new_val;
          } else {
            cur_ind = 0;
            _ref = me.params.all;
            for (k in _ref) {
              v = _ref[k];
              if (k.parsesToNumber()) {
                cur_ind += 1;
                if (v === key) {
                  return;
                }
              }
            }
            me.params.all[cur_ind.toNumber()] = key;
          }
          me.check_if_params_changed();
          return me.params.invalidate(key);
        },
        preset: function(key, val) {
          if (me.params.all[key] == null) {
            return me.set(key, val);
          }
        },
        remove: function(key) {
          var k, v, _ref;
          delete me.params.all[key];
          _ref = me.params.all;
          for (k in _ref) {
            v = _ref[k];
            if (k.parsesToNumber() && v === key) {
              delete me.params.all[k];
            }
          }
          me.check_if_params_changed();
          return me.params.invalidate(key);
        },
        toggle: function(key, new_val) {
          if (me.params.get(key)) {
            return me.params.remove(key);
          } else {
            return me.params.set(key, new_val);
          }
        },
        invalidate: function(param_key) {
          var _ref;
          log('params invalidate:', param_key);
          if ((_ref = me.params.contexes[param_key]) != null) {
            _ref.values(function(ctx) {
              return ctx.invalidate();
            });
          }
          return delete me.params.contexes[param_key];
        }
      },
      path: function() {
        var last;
        if (is_blank(last = me.path_history.last())) {
          return me.main_page;
        } else {
          return last;
        }
      },
      start_url_checking: function(path) {
        if (path) {
          me.open_page({
            path: path
          });
        }
        window.onhashchange = Pager.check_url_hash;
        return Pager.check_url_hash();
      },
      get_page: function() {
        return Template[me.page_name] || me.main_page;
      },
      path_from_page_and_params: function(page, params) {
        var k, key_str, key_val_str, v;
        if (page == null) {
          page = me.page_name;
        }
        if (params == null) {
          params = me.params.all;
        }
        key_str = key_val_str = '';
        for (k in params) {
          v = params[k];
          if (k.parsesToNumber()) {
            key_str += "/" + v;
          } else {
            key_val_str += "/" + k + "=" + v;
          }
        }
        return page + key_str + key_val_str;
      },
      page_and_params_from_path: function(path_str) {
        var el, key_or_val, non_key_param_ind, page_name, params, params_arr, val, _i, _len, _ref;
        if (path_str != null ? path_str.has('/') : void 0) {
          params_arr = path_str.split('/').remove(function(e) {
            return is_blank(e);
          });
          page_name = params_arr.shift();
          params = {};
          non_key_param_ind = 0;
          for (_i = 0, _len = params_arr.length; _i < _len; _i++) {
            el = params_arr[_i];
            _ref = el.split('='), key_or_val = _ref[0], val = _ref[1];
            if (val != null) {
              params[key_or_val] = val;
            } else {
              params[non_key_param_ind] = key_or_val;
              non_key_param_ind += 1;
            }
          }
          return [page_name, params];
        } else {
          return [path_str, {}];
        }
      },
      check_if_params_changed: function() {
        var path;
        location.hash = hashbang + (path = me.path_from_page_and_params());
        if (path !== me.path_history.last()) {
          if (me.path_stack.last().split('/')[0] === path.split('/')[0]) {
            me.path_stack.splice(-1, 1, path);
          }
          me.path_history.push(path);
          return me.params_changed_event();
        }
      },
      params_changed_event: function() {
        var active_tmpls, changed_params, cur_val, k, old_page, old_params, old_val, tmpl_name, v, _base, _i, _len, _ref, _ref1, _ref2, _ref3, _results;
        return;
        if (!(active_tmpls = Houce.active_templates.keys()).map(function(tmpl_name) {
          var _ref;
          return (_ref = Template[tmpl_name].events) != null ? _ref.params : void 0;
        }).compact().length) {
          return;
        }
        ((_ref = Template[me.page_name].events) != null ? _ref.params : void 0) != null;
        _ref1 = me.page_and_params_from_path(Pager.path_history.at(-2)), old_page = _ref1[0], old_params = _ref1[1];
        changed_params = {};
        if (old_page !== me.page_name) {
          _ref2 = me.params.all;
          for (k in _ref2) {
            v = _ref2[k];
            changed_params[k] = v;
            if (k.parsesToNumber() && typeof v !== 'number') {
              changed_params[v] = true;
            }
          }
        } else {
          _ref3 = me.params.all;
          for (k in _ref3) {
            cur_val = _ref3[k];
            if (cur_val !== old_params[k]) {
              changed_params[k] = cur_val;
              if (k.parsesToNumber()) {
                changed_params[cur_val] = true;
              }
            }
          }
          for (k in old_params) {
            old_val = old_params[k];
            if ((old_val != null) && !(me.params.all[k] != null)) {
              changed_params[k] = false;
              if (k.parsesToNumber() && typeof v !== 'number') {
                changed_params[old_val] = false;
              }
            }
          }
        }
        _results = [];
        for (_i = 0, _len = active_tmpls.length; _i < _len; _i++) {
          tmpl_name = active_tmpls[_i];
          _results.push(typeof (_base = Template[tmpl_name].events).params === "function" ? _base.params(changed_params) : void 0);
        }
        return _results;
      },
      go_back: function(default_prev, steps) {
        if (steps == null) {
          steps = 1;
        }
        steps.times(function() {
          return me.path_stack.pop();
        });
        if (me.path_stack.length) {
          me.back_path = me.path_stack.pop();
          history.go(-steps);
        } else {
          me.open_page({
            path: default_prev || me.main_page
          });
        }
        return false;
      },
      check_url_hash: function() {
        var hash, key, new_path_str, old_key, old_val, page, params, val, _ref, _ref1, _results;
        hash = window.location.hash;
        if (hash.slice(0, 2) !== hashbang) {
          return window.location.hash = bang + me.main_page;
        }
        new_path_str = hash.slice(2);
        if (new_path_str === me.path_history.last()) {
          return;
        }
        _ref = me.page_and_params_from_path(new_path_str), page = _ref[0], params = _ref[1];
        if (me.back_path != null) {
          me.open_page({
            path: me.back_path
          });
          return me.back_path = null;
        } else if (page !== me.page_name) {
          return me.open_page({
            page: page,
            params: params
          });
        } else if (!equal(params, me.params.all)) {
          _ref1 = me.params.all;
          for (old_key in _ref1) {
            old_val = _ref1[old_key];
            if (params[old_key] !== old_val) {
              me.remove(old_key);
            }
          }
          _results = [];
          for (key in params) {
            val = params[key];
            _results.push(me.set(key, val));
          }
          return _results;
        }
      },
      open_page: function(args) {
        var error, i, new_path, old_page, templ, _ref, _ref1;
        if (!(args != null)) {
          args = {
            path: Pager.path()
          };
        } else if (typeof args === 'string') {
          args = {
            path: args
          };
        }
        if (args.path != null) {
          if (args.path[0] === '#') {
            args.path = args.path.split('/').slice(1).join('/');
          }
          _ref = me.page_and_params_from_path(args.path), args.page = _ref[0], args.params = _ref[1];
        }
        if ((((_ref1 = (old_page = Template[me.page_name])) != null ? _ref1.close : void 0) != null) && !args.already_closed) {
          return old_page.close(me.open_page.bind(me, merge(args, {
            already_closed: true
          })), args.page, args.params);
        }
        me.page_name = args.page;
        me.params.all = args.params;
        me.path_history.push(new_path = me.path_from_page_and_params());
        if ((i = me.path_stack.indexOf(new_path)) !== -1) {
          me.path_stack = me.path_stack.to(i);
        }
        me.path_stack.push(new_path);
        location.hash = bang + new_path;
        me.before_open_page();
        error = null;
        if ((templ = Template[me.page_name]) != null) {
          log('templ', templ);
          if (templ.html != null) {
            Pager.tmpl_container.html(Houce.render_spark(me.page_name));
          } else {
            error = "<strong>'" + me.page_name + "' has not defined @open, @params_changed or @html function and thus can't be executed.</strong>";
          }
          me.params_changed_event();
        } else {
          if (Houce.log_events) {
            log("WARNING: " + me.page_name + ".templ not found!");
          }
          error = "Template <strong>" + me.page_name + ".templ</strong> not found!";
        }
        if (error != null) {
          $('body').html(error);
        }
        return me.after_open_page();
      }
    };
  })();

  Pager.get = Pager.params.get;

  Pager.set = Pager.params.set;

  Pager.preset = Pager.params.preset;

  Pager.remove = Pager.params.remove;

  Pager.toggle = Pager.params.toggle;

}).call(this);
